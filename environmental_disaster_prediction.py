# -*- coding: utf-8 -*-
"""environmental_disaster_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qHFWuggwqrN4_4ripmkqGym640nLXrPK
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the dataset
df = pd.read_csv("/content/natural_disasters_2024_final.csv")
df.head()

df.drop(columns=["Disaster_ID","Date"],inplace=True)

df.head()

df["Disaster_Type"].unique()

df["Disaster_Type"].value_counts()

df["Location"].unique()

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
for i in ["Disaster_Type"] :
  df[i] = label_encoder.fit_transform(df[i])

df.head()

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
for i in ["Location"] :
  df[i] = label_encoder.fit_transform(df[i])

x=df.iloc[:,1:9]
x

# prompt: perform oversampling on disaster type column

y=df.iloc[:,0]
y
from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)
x_resampled, y_resampled = smote.fit_resample(x, y)
from collections import Counter
print("Original dataset shape %s" % Counter(y))
print("Resampled dataset shape %s" % Counter(y_resampled))

x=x_resampled
y=y_resampled

y



# Step 4: Split data into training and testing sets (80% train, 20% test)
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=42,stratify=y)

# Step 6: Train the Logistic Regression model
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(xtrain, ytrain)

ypred = model.predict(xtest)

from sklearn.metrics import accuracy_score, classification_report
accuracy = accuracy_score(ytest, ypred)

class_report = classification_report(ytest, ypred)

# Print results
print("Model Accuracy:", accuracy)

print("Classification Report:\n", class_report)

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(xtrain, ytrain)
ypred=dt.predict(xtest)
print("Using DT", classification_report(ytest, ypred))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(xtrain, ytrain)
ypred=rf.predict(xtest)
print("Using RF", classification_report(ytest, ypred))

import pickle

with open("model.pkl", "wb") as f:
    pickle.dump(model, f)
print("model saved successfully")

'''temp=float(input("Enter current temperature:"))
hum=float(input("Enter current humidity:"))
sqt=float(input("Enter square feet:"))
occ=float(input("Enter occupancy:"))
hvac=input("Enter HVAC usage:") #Off ON
hvact=["Off", "On"]
havc_final=hvact.index(hvac)

light=input("Enter lighting usage:")
lightt=["Off", "On"]
light_final=lightt.index(light)

re=float(input("enter renewable energy:"))

dof=input("enter day of week:")
doff=["Friday", "Monday", "Saturday", "Sunday", "Thursday", "Tuesday", "Wednesday"]
dof_final=doff.index(dof)

hol=input("enter holiday:")
holt=["No", "Yes"]
hol_final=holt.index(hol)

result=model.predict([[temp,hum,sqt,occ,havc_final,light_final,re,dof_final,hol_final]])
print(result)'''